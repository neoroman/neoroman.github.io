<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="http://localhost:3000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:3000/" rel="alternate" type="text/html" /><updated>2021-07-05T09:45:45+09:00</updated><id>http://localhost:3000/feed.xml</id><title type="html">NeoRoman</title><subtitle>Experienced iOS Developer adept in bringing forth expertise in design,  installation, testing and maintenance of software systems.   Experienced with the latest cutting edge development tools and procedures.    Able to effectively self-manage during independent projects,  as well as collaborate as part of a productive team.</subtitle><entry><title type="html">GraphQL-tutorial</title><link href="http://localhost:3000/GraphQL-tutorial/" rel="alternate" type="text/html" title="GraphQL-tutorial" /><published>2021-06-30T14:17:49+09:00</published><updated>2021-06-30T14:17:49+09:00</updated><id>http://localhost:3000/GraphQL-tutorial</id><content type="html" xml:base="http://localhost:3000/GraphQL-tutorial/">&lt;hr /&gt;
&lt;h2 id=&quot;contents&quot;&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/GraphQL-tutorial/#GraphQL%20이란?&quot;&gt;GraphQL 이란?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/GraphQL-tutorial/#왜%20GraphQL%20인가?&quot;&gt;왜 GraphQL 인가?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/GraphQL-tutorial/#GraphQL의%20장점과%20단점&quot;&gt;GraphQL의 장점과 단점&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/GraphQL-tutorial/#GraphQL과%20오픈소스:%20Open%20API%20및%20Swagger&quot;&gt;GraphQL과 오픈소스: Open API 및 Swagger&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/GraphQL-tutorial/#GraphQL%20준비&quot;&gt;GraphQL 준비&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/GraphQL-tutorial/#GraphQL%20문법&quot;&gt;GraphQL 문법&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/GraphQL-tutorial/#GraphQL%시작&quot;&gt;GraphQL 시작(start)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/GraphQL-tutorial/#GraphQL%20끝&quot;&gt;GraphQL 끝(final)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/GraphQL-tutorial/#Further%20Study&quot;&gt;Further Study&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/GraphQL-tutorial/#References&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;graphql-이란&quot;&gt;&lt;a href=&quot;#GraphQL 이란?&quot;&gt;GraphQL 이란?&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;API를 위한 쿼리 언어&lt;/li&gt;
  &lt;li&gt;기 존재하는 데이터 쿼리를 수행하기 위한 런타임&lt;/li&gt;
  &lt;li&gt;API 진화의 강력한 개발자 도구: playground&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;왜-graphql-인가&quot;&gt;&lt;a href=&quot;#왜 GraphQL 인가?&quot;&gt;왜 GraphQL 인가?&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Over fetching
    &lt;ul&gt;
      &lt;li&gt;기존, 예를들어 사용자 정보에 불필요한 부분이 REST API에 포함되있다면, Front 전체를 다 받아서 parsing 해야함&lt;/li&gt;
      &lt;li&gt;GraphQL을 사용하면 Front가 원하는 정보만 요청할 수 있음&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Over fetching&lt;/code&gt; 해결!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Under fetching
    &lt;ul&gt;
      &lt;li&gt;기존, 예를들어 영화 앱을 개발하는 경우 비디오 정보와 제작자 정보를 받아와야했음&lt;/li&gt;
      &lt;li&gt;하나의 주제를 표출하기 위해 여러 개의 REST API를 호출하는 해야하는 것을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Under fetching&lt;/code&gt;이라함&lt;/li&gt;
      &lt;li&gt;GraphQL을 사용하면 Front가 한번의 요청으로 원하는 데이터를 얻을 수 있음&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Under fetching&lt;/code&gt; 해결!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Backend 개발
    &lt;ul&gt;
      &lt;li&gt;Schema와 Resolver를 한 번만 구현 해놓으면 추가 patch 비용이 거의 들지 않음&lt;/li&gt;
      &lt;li&gt;API 문서화는 주석으로 대신할 수 있음 (이력관리는 swagger나 마찬가지임)&lt;/li&gt;
      &lt;li&gt;기본 Framework: &lt;a href=&quot;https://www.apollographql.com/server/&quot;&gt;Apollo GraphQL&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;유용한 툴: &lt;a href=&quot;https://github.com/sequelize/sequelize-auto&quot;&gt;Sequelize Auto&lt;/a&gt;, &lt;a href=&quot;https://github.com/ardatan/graphql-tools&quot;&gt;GraphQL Tools&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;간편해진 Loading, Error, Success 처리
    &lt;ul&gt;
      &lt;li&gt;Backend에서는 return type이 이미 지정되있으므로 error는 throw로 처리&lt;/li&gt;
      &lt;li&gt;Front에서는 동일한 Error에 대해서 예외처리만 하면 됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Playground GUI 테스트 환경
    &lt;ul&gt;
      &lt;li&gt;기존, API 문서와 Postman 을 대치 가능&lt;/li&gt;
      &lt;li&gt;Playground 에서 쿼리 Loading, Error, Success를 바로 확인 가능&lt;/li&gt;
      &lt;li&gt;검색 기능이 내장된 Document 기본 제공&lt;/li&gt;
      &lt;li&gt;Schema 다운로드 기능 기본 제공&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;graphql-장점과-단점&quot;&gt;&lt;a href=&quot;#GraphQL 장점과 단점&quot;&gt;GraphQL 장점과 단점&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;GraphQL 장점
    &lt;ul&gt;
      &lt;li&gt;GraphQL 스키마는 GraphQL 애플리케이션(Front)에 신뢰할 수 있는 단일 소스를 하나 제공 =&amp;gt; Query.graphql or Query.json&lt;/li&gt;
      &lt;li&gt;GraphQL 호출은 단일 왕복으로 처리되며 클라이언트는 오버페칭 없이 요청한 결과만 얻음&lt;/li&gt;
      &lt;li&gt;엄격하게 정의된 데이터 유형은 클라이언트와 서버 간 통신 오류를 줄여줌&lt;/li&gt;
      &lt;li&gt;GraphQL  클라이언트(Front)는 사용 가능한 데이터 유형 목록을 요청할 수 있음&lt;/li&gt;
      &lt;li&gt;자동 생성 문서는 playground를 통해 제공&lt;/li&gt;
      &lt;li&gt;GraphQL은 애플리케이션 API가 기존 쿼리를 중단하지 않고도 진화할 수 있도록 허용&lt;/li&gt;
      &lt;li&gt;REST API로 사용할 수 없는 기능을 제공하기 위해 대부분의 오픈소스 GraphQL 확장 기능을 사용할 수 있음&lt;/li&gt;
      &lt;li&gt;GraphQL은 특정 애플리케이션 아키텍처를 지정하지 않으므로 기존 REST API에 추가하여 기존 API 관리 툴과 연동할 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GraphQL 단점
    &lt;ul&gt;
      &lt;li&gt;REST API에 친숙한 개발자의 경우 GraphQL를 학습하는 데 시간이 필요&lt;/li&gt;
      &lt;li&gt;GraphQL은 데이터 쿼리의 상당 작업을 서버측으로 옮겨 서버 개발자 작업의 복잡성이 커짐&lt;/li&gt;
      &lt;li&gt;구현 방식에 따라 GraphQL은 REST API가 아닌 다른 API 관리 전략을 필요로 할 수 있음 (특히 비용 제한과 가격을 고려하는 경우)&lt;/li&gt;
      &lt;li&gt;캐싱이 REST보다 훨씬 복잡함&lt;/li&gt;
      &lt;li&gt;API 유지관리자의 경우 유지 관리 가능한 GraphQL 스키마를 작성하기 위한 추가 태스크를 수행해야 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;graphql과-오픈소스-open-api-및-swagger&quot;&gt;&lt;a href=&quot;#GraphQL과 오픈소스: Open API 및 Swagger&quot;&gt;GraphQL과 오픈소스: Open API 및 Swagger&lt;/a&gt;&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;GraphQL은&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Facebook에서&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;개발했으며&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2012&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;년에는&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;모바일&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;애플리케이션을&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;위해&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;사용됨&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;GraphQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;사양은&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;년에&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;오픈소스로&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;공개됨&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;현재는&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GraphQL&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation이&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;감독하고&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;있음&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/&quot;&gt;Apollo&lt;/a&gt;: 프론트엔드 클라이언트 라이브러리(&lt;a href=&quot;https://www.apollographql.com/client/&quot;&gt;Apollo Client&lt;/a&gt;)와 백엔드 서버 프레임워크(&lt;a href=&quot;https://www.apollographql.com/server/&quot;&gt;Apollo Server&lt;/a&gt;)를 포함하는 GraphQL 플랫폼&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://offix.dev/&quot;&gt;Offix&lt;/a&gt;: 애플리케이션에 도달할 수 없는 경우에도 GraphQL 변형 및 쿼리를 실행할 수 있도록 허용하는 오프라인 클라이언트&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://graphback.dev/&quot;&gt;Graphback&lt;/a&gt;: GraphQL 지원 Node.js 서버를 생성하기 위한 커맨드라인 클라이언트&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/IBM/openapi-to-graphql&quot;&gt;OpenAPI-GraphQL&lt;/a&gt;: OpenAPI 사양 또는 Swagger로 설명된 API를 GraphQL로 번역하기 위한 커맨드라인 인터페이스 및 라이브러리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;graphql-준비&quot;&gt;&lt;a href=&quot;#GraphQL%20준비&quot;&gt;GraphQL 준비&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/neoroman/GraphQL-tutorial&quot;&gt;GraphQL tutorial&lt;/a&gt; 튜토리얼 준비물 다운로드
    &lt;ul&gt;
      &lt;li&gt;서버개발자: &lt;a href=&quot;https://github.com/neoroman/GraphQL-tutorial#graphql-tutorial&quot;&gt;REAME.md&lt;/a&gt;의 내용을 읽고 starter &amp;gt; final 순으로 진행&lt;/li&gt;
      &lt;li&gt;앱개발자: &lt;a href=&quot;https://github.com/neoroman/GraphQL-tutorial/tree/main/final#graphql-tutorial-for-final&quot;&gt;Final &amp;gt; README.md&lt;/a&gt; 내용을 읽고 final 설치 후 각각 &lt;a href=&quot;https://github.com/neoroman/GraphQL-tutorial/tree/main/clientSample/ios#ios-sample-for-graphql-tutorial&quot;&gt;iOS&lt;/a&gt;, &lt;a href=&quot;https://github.com/neoroman/GraphQL-tutorial/tree/main/clientSample/android#android-sample-for-graphql-tutorial&quot;&gt;Android&lt;/a&gt;로 진행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;graphql-문법&quot;&gt;&lt;a href=&quot;#GraphQL%20문법&quot;&gt;GraphQL 문법&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;GraphQL Schema Language Cheat Sheet
&lt;img src=&quot;https://miro.medium.com/max/5052/1*HaEeoGrja2IGUxzvmj5Vnw.png&quot; alt=&quot;GraphQL Cheat Sheet&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;graphql-시작-github&quot;&gt;&lt;a href=&quot;#GraphQL 시작&quot;&gt;GraphQL 시작&lt;/a&gt; (&lt;a href=&quot;https://github.com/neoroman/GraphQL-tutorial/tree/main/starter#graphql-tutorial-starter&quot;&gt;github&lt;/a&gt;)&lt;/h1&gt;

&lt;h3 id=&quot;서버-설치&quot;&gt;서버 설치&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;MySQL 서버 설치
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt;  홈브루( &lt;a href=&quot;https://brew.sh/index_ko&quot;&gt;HomeBrew&lt;/a&gt; )를 통한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; 설치
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ brew install mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; 데몬 서비스 등록하기 (선택)
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ brew services start mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; 데이터베이스 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; 사용자 암호 설정하기
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ mysql -uroot
 mysql&amp;gt; USE mysql
 mysql&amp;gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'qwer1234';
 mysql&amp;gt; FLUSH PRIVILEGES;
 mysql&amp;gt; quit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sample_db_graphql&lt;/code&gt; 데이터 베이스 생성하기
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ mysql -uroot -p
 mysql&amp;gt; CREATE DATABASE sample_db_graphql;
 mysql&amp;gt; quit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seeders/dump-sample_db_graphql.sql&lt;/code&gt; 파일로부터 DB 복원하기
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mysql -uroot -p sample_db_graphql &amp;lt; ./seeders/dump-sample_db_graphql.sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;npm 의존성 패키지 설치하기
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;3.1 If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sh: nodemon: command not found&lt;/code&gt; error occurred&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   $ npm i -g nodemon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;서버-설치-1&quot;&gt;서버 설치&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;npm 으로 서버 시작하기
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;다음과 같은 메세지와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt;의 4000번 포트에 서버가 시작된다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [nodemon] 2.0.7
 [nodemon] to restart at any time, enter `rs`
 [nodemon] watching path(s): *.*
 [nodemon] watching extensions: js,mjs,json
 [nodemon] starting `babel-node index.js`
 Graphql Server Running on localhost:4000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;blockquote&gt;
      &lt;p&gt;언제든지 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl-C&lt;/code&gt;를 눌러서 서버를 중단할 수 있다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;generate-models-for-graphql&quot;&gt;Generate models for GraphQL&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;다음 주소를 즐겨사용하는 웹 브라우져 주소창에 넣고 이동한다. 
    &lt;a href=&quot;http://localhost:4000/play&quot;&gt;http://localhost:4000/play&lt;/a&gt; (구글 크롬 추천)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;다음과 같이 쿼리를 입력해본다.
    &lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getUserInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;neoroman&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;https://github.com/neoroman/GraphQL-tutorial/raw/main/screenshots/02_input_query_in_playground.gif&quot; alt=&quot;Playground.GIF&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;플레이 버튼을 누르면 다음과 같은 오류가 발생한다.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
Error: Cannot return null for non-nullable field Query.getUserInfo.
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;blockquote&gt;
      &lt;p&gt;이 오류는 GraphQL 리졸버(resolver)와 MySQL와 연결해주는 모델(model)이 부재하여 발생한 것이다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sequelize-auto&lt;/code&gt; 설치 (설치하지 않았다면)
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew sequelize-auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;MySQL 데이터베이스 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; 패스워드 = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qwer1234&lt;/code&gt;로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sequelize-auto&lt;/code&gt;를 실행하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GraphQL Schema&lt;/code&gt;를 생성
    &lt;ul&gt;
      &lt;li&gt;경고: 패스워드를 커맨드 입력란에 기입하는 것은 보안에 위험할 수 있음
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sequelize-auto -c config/sequelize-auto.config.json -x qwer1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;blockquote&gt;
          &lt;p&gt;이제 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{TABLE_NAME}.js&lt;/code&gt; 파일들을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./models&lt;/code&gt; 내에서 확인할 수 있다.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graphql/resolvers.js&lt;/code&gt; 파일을 연다.
    - 다음의 코드와 다른 부분을 수정한다.
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolvers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;getUserInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
                 &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
                 &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                 &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AdminUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
             &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt; 
         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;Mutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;putUserInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
                 &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AdminUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                         &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                         &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;updateTime&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                         &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;putUserInfo: cannot find user:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;putUserInfo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;1번은 args.id를 이용해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AdminUser&lt;/code&gt; 테이블을 조회한 결과를 리턴한다.&lt;/li&gt;
      &lt;li&gt;2번은 args.id등 입력 인자들을 이용해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AdminUser&lt;/code&gt; 테이블의 사용자 정보를 수정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;play&lt;/code&gt; 버튼을 다시 눌러보면, 이제 성공 결과를 확인할 수 있다. 짜잔
  &lt;img src=&quot;https://github.com/neoroman/GraphQL-tutorial/raw/main/screenshots/03_playground_result_success.png&quot; alt=&quot;Playground Query Success&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;!-- * [GraphQL 끝](GraphQL 끝) --&gt;&lt;/p&gt;
&lt;h1 id=&quot;graphql-끝-github&quot;&gt;&lt;a href=&quot;#GraphQL 끝&quot;&gt;GraphQL 끝&lt;/a&gt; (&lt;a href=&quot;https://github.com/neoroman/GraphQL-tutorial/tree/main/final#graphql-tutorial-for-final&quot;&gt;github&lt;/a&gt;)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Sample of GraphQL-Yoga + Express + JWT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;서버-설치-2&quot;&gt;서버 설치&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;MySQL 서버 설치
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt;  홈브루( &lt;a href=&quot;https://brew.sh/index_ko&quot;&gt;HomeBrew&lt;/a&gt; )를 통한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; 설치
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ brew install mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; 데몬 서비스 등록하기 (선택)
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ brew services start mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; 데이터베이스 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; 사용자 암호 설정하기
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ mysql -uroot
 mysql&amp;gt; USE mysql
 mysql&amp;gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'qwer1234';
 mysql&amp;gt; FLUSH PRIVILEGES;
 mysql&amp;gt; quit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sample_db_graphql&lt;/code&gt; 데이터 베이스 생성하기
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ mysql -uroot -p
 mysql&amp;gt; CREATE DATABASE sample_db_graphql;
 mysql&amp;gt; quit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seeders/dump-sample_db_graphql.sql&lt;/code&gt; 파일로부터 DB 복원하기
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mysql -uroot -p sample_db_graphql &amp;lt; ./seeders/dump-sample_db_graphql.sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;npm 의존성 패키지 설치하기
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;3.1 If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sh: nodemon: command not found&lt;/code&gt; error occurred&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   $ npm i -g nodemon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;서버-실행&quot;&gt;서버 실행&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;npm 으로 서버 시작하기
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;다음과 같은 메세지와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt;의 4000번 포트에 서버가 시작된다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [nodemon] 2.0.7
 [nodemon] to restart at any time, enter `rs`
 [nodemon] watching path(s): *.*
 [nodemon] watching extensions: js,mjs,json
 [nodemon] starting `babel-node index.js`
 Graphql Server Running on localhost:4000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;blockquote&gt;
      &lt;p&gt;언제든지 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl-C&lt;/code&gt;를 눌러서 서버를 중단할 수 있다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Violla, now you can connect localhost:4000/play on your web brower, see next &lt;a href=&quot;https://github.com/neoroman/GraphQL-tutorial/tree/main/final#graphql-playground&quot;&gt;section&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;(TODO) 심화학습 추가하기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;graphql-playground&quot;&gt;GraphQL playground&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Open your favorite web browser (recommend Goolge Chrome)&lt;/li&gt;
  &lt;li&gt;Paste and go to http://localhost:4000/play&lt;/li&gt;
  &lt;li&gt;You could check like followings:
   &lt;a href=&quot;http://localhost:4000/play&quot;&gt;&lt;img src=&quot;https://github.com/neoroman/GraphQL-tutorial/blob/main/screenshots/01_GraphQL-playground.png?raw=true&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Copy and paste &lt;a href=&quot;https://raw.githubusercontent.com/neoroman/GraphQL-tutorial/main/final/graphql/playgroundQuery.txt&quot;&gt;graphql/playgroundQuery.txt&lt;/a&gt; queries into left pane of GraphQL playground&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;authentication-optional&quot;&gt;Authentication (Optional)&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Client call /secure with ID and Password&lt;/li&gt;
  &lt;li&gt;/secure response is JWT(JSON Web Token)&lt;/li&gt;
  &lt;li&gt;Client set header of request with token: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{given token}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Check token validation with /secure/check&lt;/li&gt;
  &lt;li&gt;Client receive error unless JWT header for request&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;further-study&quot;&gt;&lt;a href=&quot;#Further Study&quot;&gt;Further Study&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ardatan/graphql-tools&quot;&gt;GraphQL Tools&lt;/a&gt; 활용 방법 Study&lt;/li&gt;
  &lt;li&gt;파일 업로드 지원&lt;/li&gt;
  &lt;li&gt;GraphQL 구독을 사용한 실시간 기능&lt;/li&gt;
  &lt;li&gt;TypeScript 지원&lt;/li&gt;
  &lt;li&gt;쿼리 성능 추적&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;&lt;a href=&quot;#References&quot;&gt;References&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.graphql.com/guides/&quot;&gt;GraphQL: Guides and Best Practices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://darrengwon.tistory.com/289&quot;&gt;GraphQL-yoga 소개 및 간단한 활용&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@cadenzah/graphql-node-02-getting-started&quot;&gt;GraphQL - Node Tutorial - 02. Getting Started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.redhat.com/ko/topics/api/what-is-graphql&quot;&gt;Redhat: GraphQL이란?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- 
You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

Jekyll requires blog post files to be named according to the following format:

`YEAR-MONTH-DAY-title.MARKUP`

Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk]. --&gt;</content><author><name></name></author><category term="GraphQL" /><category term="tutorial" /><summary type="html">Contents GraphQL 이란? 왜 GraphQL 인가? GraphQL의 장점과 단점 GraphQL과 오픈소스: Open API 및 Swagger GraphQL 준비 GraphQL 문법 GraphQL 시작(start) GraphQL 끝(final) Further Study References</summary></entry><entry><title type="html">Welcome to a New romantic world!</title><link href="http://localhost:3000/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to a New romantic world!" /><published>2021-06-12T11:25:49+09:00</published><updated>2021-06-12T11:25:49+09:00</updated><id>http://localhost:3000/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:3000/welcome-to-jekyll/">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>